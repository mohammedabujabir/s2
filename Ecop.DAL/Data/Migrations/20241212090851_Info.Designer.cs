// <auto-generated />
using System;
using Ecop.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecop.PL.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241212090851_Info")]
    partial class Info
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecop.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e780f50-e0cc-4d06-9b9f-c3c68c952ea0",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@Gmail.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "Admin@123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca0ceca8-6d55-4e6d-98d2-746a48b174a0",
                            TwoFactorEnabled = false,
                            UserName = "AdminUser"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5f56445-c71a-4d04-8ff0-08979330f852",
                            Email = "citizen1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITIZEN1@Gmail.COM",
                            NormalizedUserName = "CITIZENUSER1",
                            PasswordHash = "Citizen@123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb6fdd2d-1d0c-423d-a366-5b18c3853e98",
                            TwoFactorEnabled = false,
                            UserName = "CitizenUser1"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12190b7e-d29d-4206-9579-95855b3bd2dd",
                            Email = "citizen@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITIZEN2@Gmail.COM",
                            NormalizedUserName = "CITIZENUSER2",
                            PasswordHash = "Citizen@123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d41dc6cd-14f0-492c-9dea-cf2da7bf155d",
                            TwoFactorEnabled = false,
                            UserName = "CitizenUser2"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bb61a4c-2b65-4e0f-8d79-a6efa56faf8c",
                            Email = "police1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "POLICE1@Gmail.COM",
                            NormalizedUserName = "POLICEUSER1",
                            PasswordHash = "Police@123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de8986ba-a6c4-4cfb-b805-f91f059906ed",
                            TwoFactorEnabled = false,
                            UserName = "PoliceUser1"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5d39259-29ee-46aa-a29b-32a9ebb19807",
                            Email = "police2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "POLICE2@Gmail.COM",
                            NormalizedUserName = "POLICEUSER2",
                            PasswordHash = "Police@123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55d1733e-d06a-4807-b0f5-f9ccde2a69ef",
                            TwoFactorEnabled = false,
                            UserName = "PoliceUser2"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c16fc78-edc5-4253-8296-adb50644c230",
                            Email = "judge1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUDGE1@Gmail.COM",
                            NormalizedUserName = "JUDGEUSER1",
                            PasswordHash = "Judge@123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c33f4c95-9fb7-4c30-8cc9-934a30f66a3c",
                            TwoFactorEnabled = false,
                            UserName = "JudgeUser1"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f112869-efb7-4c18-8713-463d6c2b505a",
                            Email = "judge2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUDGE2@Gmail.COM",
                            NormalizedUserName = "JUDGEUSER2",
                            PasswordHash = "Judge@123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6e14028-90d6-4a1a-a23d-c530c7b6e759",
                            TwoFactorEnabled = false,
                            UserName = "JudgeUser2"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Citizen", b =>
                {
                    b.Property<int>("CitizenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitizenId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Camera_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CitizenId");

                    b.HasIndex("UserId");

                    b.ToTable("Citizens");

                    b.HasData(
                        new
                        {
                            CitizenId = 1,
                            Address = "jenin",
                            Camera_id = "CAM123",
                            Email = "mohammed@gmail.com",
                            Name = "Mohammed",
                            Password = "Mohammed@123",
                            Phone = "0568089936",
                            UserId = "2"
                        },
                        new
                        {
                            CitizenId = 2,
                            Address = "jenin",
                            Camera_id = "CAM123",
                            Email = "noor@gmail.com",
                            Name = "Noor",
                            Password = "Noor@123",
                            Phone = "0568086536",
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.Court", b =>
                {
                    b.Property<int>("CourtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourtId");

                    b.ToTable("Courts");
                });

            modelBuilder.Entity("Ecop.DAL.Models.CourtDecisions", b =>
                {
                    b.Property<int>("CourtDecisionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtDecisionsId"));

                    b.Property<int>("Courtid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JudgeId")
                        .HasColumnType("int");

                    b.Property<string>("Penalty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoliceDecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Verdict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("CourtDecisionsId");

                    b.HasIndex("Courtid");

                    b.HasIndex("JudgeId");

                    b.HasIndex("PoliceDecisionId")
                        .IsUnique()
                        .HasFilter("[PoliceDecisionId] IS NOT NULL");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("CourtDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Judge", b =>
                {
                    b.Property<int>("JudgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JudgeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JudgeId");

                    b.HasIndex("UserId");

                    b.ToTable("Judges");

                    b.HasData(
                        new
                        {
                            JudgeId = 1,
                            Address = "jenin",
                            Email = "hadi@gmail.com",
                            Name = "Hadi",
                            Password = "Hadi@123",
                            Phone = "0598086536",
                            UserId = "6"
                        },
                        new
                        {
                            JudgeId = 2,
                            Address = "nablus",
                            Email = "braa@gmail.com",
                            Name = "Braa",
                            Password = "Braa@123",
                            Phone = "0528086536",
                            UserId = "7"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.Policeman", b =>
                {
                    b.Property<int>("PolicemanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicemanId"));

                    b.Property<string>("Badge_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PolicemanId");

                    b.HasIndex("UserId");

                    b.ToTable("Policemans");

                    b.HasData(
                        new
                        {
                            PolicemanId = 1,
                            Badge_Number = "123",
                            Email = "mahdi@gmail.com",
                            Name = "Mahdi",
                            Password = "Mahdi@123",
                            Phone = "0599086536",
                            UserId = "4"
                        },
                        new
                        {
                            PolicemanId = 2,
                            Badge_Number = "1521",
                            Email = "ali@gmail.com",
                            Name = "Ali",
                            Password = "Ali@123",
                            Phone = "0599086777",
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.PolicemanDecision", b =>
                {
                    b.Property<int>("PolicemanDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Policemanid")
                        .HasColumnType("int");

                    b.Property<bool>("ReferredToCourt")
                        .HasColumnType("bit");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("PolicemanDecisionId");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("PolicemanDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.TrafficViolation", b =>
                {
                    b.Property<int>("TrafficViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrafficViolationId"));

                    b.Property<string>("Car_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Reported_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrafficViolationId");

                    b.HasIndex("CitizenId");

                    b.ToTable("TrafficViolations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Citizen",
                            NormalizedName = "CITIZEN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Police",
                            NormalizedName = "POLICE"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Judge",
                            NormalizedName = "JUDGE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecop.DAL.Models.Car", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Citizen", "Citizen")
                        .WithMany("Cars")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Citizen", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecop.DAL.Models.CourtDecisions", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Court", "Court")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("Courtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.Judge", "Judge")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.PolicemanDecision", "PoliceDecision")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Ecop.DAL.Models.CourtDecisions", "PoliceDecisionId");

                    b.HasOne("Ecop.DAL.Models.TrafficViolation", "ViolationStatus")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Ecop.DAL.Models.CourtDecisions", "Violationid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("Judge");

                    b.Navigation("PoliceDecision");

                    b.Navigation("ViolationStatus");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Judge", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Policeman", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecop.DAL.Models.PolicemanDecision", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Policeman", "Policeman")
                        .WithMany("Decisions")
                        .HasForeignKey("PolicemanDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.TrafficViolation", "TrafficViolation")
                        .WithOne("Decision")
                        .HasForeignKey("Ecop.DAL.Models.PolicemanDecision", "Violationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policeman");

                    b.Navigation("TrafficViolation");
                });

            modelBuilder.Entity("Ecop.DAL.Models.TrafficViolation", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Citizen", "Citizen")
                        .WithMany("TrafficViolations")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecop.DAL.Models.Citizen", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("TrafficViolations");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Court", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Judge", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Policeman", b =>
                {
                    b.Navigation("Decisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.PolicemanDecision", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecop.DAL.Models.TrafficViolation", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();

                    b.Navigation("Decision")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
